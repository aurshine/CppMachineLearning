#pragma once
#include <vector>
#include <iostream>
#include <functional>
#include "extendMap.hpp"

/*
* catch vec in index
* if index out of range that return value T of default constructor
*/
template<class T>
T atVector(const std::vector<T>& vec, size_t index)
{
	if (index < vec.size())
		return vec[index];
	else
		return T();
}

template<class T>
void shrinkVector(std::vector<T>& vec, size_t size)
{
	while (vec.size() > size)	vec.pop_back();
}

template<class T>
std::ostream& operator<< (std::ostream& cout, const std::vector<T>& vec)
{
	std::cout << "[";
	for (int i = 0; i < vec.size(); i++)
	{
		if (i)	std::cout << ", ";
		std::cout << vec[i];
	}

	std::cout << "] ";

	return cout;
}

/*
* split vector [l, r]
*/
template<class T>
std::vector<T> splitVector(const std::vector<T>& vec, size_t l, size_t r)
{
	std::vector<T> split;
	for (size_t i = l; i <= r; i++)
		split.push_back(vec[i]);

	return split;
}

/*
* cmp is the compare function of vec
* binary search in vector
*/
template<class T>
size_t binSearchVector(const std::vector<T>& vec, T target, std::function<bool(T, T)> cmp)
{
	size_t l = 0, r = vec.size() - 1;

	while (l < r)
	{
		auto mid = l + r >> 1;
		if (cmp(vec[mid], target))
			l = mid;
		else
			r = mid + 1;
	}

	if (target != vec[l])	return -1;
	return l;
}

/*
* filter vector if function return true
*/
template<class T>
std::vector<T> filterVector(const std::vector<T>& vec, std::function<bool(T)> filter)
{
	std::vector<T> result;
	for (auto v : vec)
		if (filter(v))
			result.push_back(v);

	return result;
}

template<class T>
std::vector<T> filterIndex(const std::vector<T>& vec, std::function<bool(size_t)> filter)
{
	std::vector<T> result;
	for (size_t i = 0; i < vec.size(); ++i)
		if (filter(i))
			result.push_back(vec[i]);

	return result;
}

template<class T>
size_t bestInVector(const std::vector<T>& vec, std::function<bool(T, T)> best)
{
	size_t id = 0;
	for (int i = 0; i < vec.size(); i++)
		if (best(vec[i], vec[id]))
			id = i;

	return id;
}

template<class T1, class T2>
std::vector<std::pair<T1, T2>>
unionVector(const std::vector<T1>& vec1, const std::vector<T2>& vec2)
{
	std::vector<std::pair<T1, T2>> _union;
	if (vec1.size() != vec2.size())	return _union;

	for (size_t i = 0; i < vec1.size(); ++i)
		_union.push_back({ vec1[i], vec2[i] });

	return _union;
}

/*
* drop pos in vector
*/
template<class T>
std::vector<T> dropVector(const std::vector<T>& vec, size_t pos)
{
	std::vector<T> result;
	for (size_t i = 0; i < vec.size(); ++i)
		if (i != pos)
			result.push_back(vec[i]);

	return result;
}

template<class T, class K = T>
std::map<K, size_t>
frequencyVector(
	const std::vector<T>& vec,
	std::function<K(T)> key = [](T v) {return v;})
{
	std::map<K, size_t> count;
	for (auto v : vec)
		count[key(v)] ++;

	return count;
}
